/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;


import Business.Enterprise.Enterprise;
import Business.Org.OrgDoctor;
import Business.SystemUserAccount.SystemUsers;
import Business.WorkQueue.BloodBankReq;
import Business.WorkQueue.PatientTreatmentReq;
import Business.WorkQueue.WorkReq;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;


/**
 *
 * @author Parth
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel jPanel;
    private OrgDoctor docOrg;
    private Enterprise entrpz;
    private SystemUsers usrAcnt;
    //private Map<PatientTreatmentWorkRequest, LabTestWorkRequest> patientToLab = new HashMap<>();

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, SystemUsers account, OrgDoctor organization, Enterprise enterprise) {
        initComponents();

        this.jPanel = userProcessContainer;
        this.docOrg = organization;
        this.entrpz = enterprise;
        this.usrAcnt = account;
        lblValue.setText(enterprise.getName());
        pplReqTbl();
    }

    public void pplReqTbl() {

        DefaultTableModel model = (DefaultTableModel) tblDrWrkArea.getModel();

        model.setRowCount(0);


        for (WorkReq req : docOrg.getWrkQ().getWrkReqs()) {
            Object[] row = new Object[8];
            
            if(((PatientTreatmentReq) req).getPatient().getDocType().equals(usrAcnt.getUserType())){
            
            row[0] = ((PatientTreatmentReq) req).getRegistrationDate();
            row[1] = String.valueOf(((PatientTreatmentReq) req).getPatient().getPatId());
            row[2] = ((PatientTreatmentReq) req).getPatient().getPatFrstNm() + " " + ((PatientTreatmentReq) req).getPatient().getPatLstNm();
            row[3] = ((PatientTreatmentReq) req);
            row[4] = ((PatientTreatmentReq) req).getDrAssignd();
            row[5] = ((PatientTreatmentReq) req).getLabAssitantEmployee();
            row[6] = ((PatientTreatmentReq) req).getResultFromLab();
            row[7] = req.getReqStatus();


            model.addRow(row);
            }
        }
        
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tblDrWrkArea.setRowSorter(sorter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDrWrkArea = new javax.swing.JTable();
        btnReqLabTst = new javax.swing.JButton();
        lblEnt = new javax.swing.JLabel();
        lblValue = new javax.swing.JLabel();
        lblMedicalTstWrkQ = new javax.swing.JLabel();
        btnAssgnToMe = new javax.swing.JButton();
        btnProvidePrescription = new javax.swing.JButton();
        btnComp = new javax.swing.JButton();
        btnViewPtn = new javax.swing.JButton();
        lblDrWrkArea = new javax.swing.JLabel();
        btnBldBnkReq = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 204, 204));

        tblDrWrkArea.setBackground(new java.awt.Color(204, 204, 204));
        tblDrWrkArea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Registration Date", "Patient Id", "Patient Name", "Illness", "Assigned Doctor", "Lab Assistant", "Lab Result", "Treatment Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDrWrkArea);

        btnReqLabTst.setBackground(new java.awt.Color(0, 102, 102));
        btnReqLabTst.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnReqLabTst.setForeground(new java.awt.Color(255, 255, 255));
        btnReqLabTst.setText("Request Lab Test");
        btnReqLabTst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReqLabTstActionPerformed(evt);
            }
        });

        lblEnt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblEnt.setText("Enterprise :");

        lblValue.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblValue.setText("<value>");

        lblMedicalTstWrkQ.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblMedicalTstWrkQ.setText("Medical Test Work Queue");

        btnAssgnToMe.setBackground(new java.awt.Color(0, 102, 102));
        btnAssgnToMe.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAssgnToMe.setForeground(new java.awt.Color(255, 255, 255));
        btnAssgnToMe.setText("Assign To Me");
        btnAssgnToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssgnToMeActionPerformed(evt);
            }
        });

        btnProvidePrescription.setBackground(new java.awt.Color(0, 102, 102));
        btnProvidePrescription.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnProvidePrescription.setForeground(new java.awt.Color(255, 255, 255));
        btnProvidePrescription.setText("Provide Prescription");
        btnProvidePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProvidePrescriptionActionPerformed(evt);
            }
        });

        btnComp.setBackground(new java.awt.Color(0, 102, 102));
        btnComp.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnComp.setForeground(new java.awt.Color(255, 255, 255));
        btnComp.setText("Complete Treatment");
        btnComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompActionPerformed(evt);
            }
        });

        btnViewPtn.setBackground(new java.awt.Color(0, 102, 102));
        btnViewPtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnViewPtn.setForeground(new java.awt.Color(255, 255, 255));
        btnViewPtn.setText("View Patient");
        btnViewPtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPtnActionPerformed(evt);
            }
        });

        lblDrWrkArea.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblDrWrkArea.setText("Doctor Work Area");

        btnBldBnkReq.setBackground(new java.awt.Color(0, 102, 102));
        btnBldBnkReq.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnBldBnkReq.setForeground(new java.awt.Color(255, 255, 255));
        btnBldBnkReq.setText("Blood Bank Request");
        btnBldBnkReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBldBnkReqActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/happy-happy-doctor.gif"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblEnt)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblValue, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(327, 327, 327)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDrWrkArea)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(lblMedicalTstWrkQ, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(btnViewPtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAssgnToMe)
                                .addGap(31, 31, 31)
                                .addComponent(btnReqLabTst)
                                .addGap(30, 30, 30)
                                .addComponent(btnProvidePrescription)
                                .addGap(18, 18, 18)
                                .addComponent(btnComp))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(325, 325, 325)
                                .addComponent(btnBldBnkReq)))
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblDrWrkArea)
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEnt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblValue, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addComponent(lblMedicalTstWrkQ)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAssgnToMe, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnProvidePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReqLabTst, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnViewPtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnComp, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBldBnkReq, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(125, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnReqLabTstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReqLabTstActionPerformed

        int selectedRow = tblDrWrkArea.getSelectedRow();
        PatientTreatmentReq wrkReq;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {

            wrkReq = (PatientTreatmentReq) tblDrWrkArea.getValueAt(selectedRow, 3);
            if (wrkReq.getDrAssignd() != null) {
                if (usrAcnt.equals(wrkReq.getDrAssignd())) {
                    if (wrkReq.getReqStatus().equalsIgnoreCase("Under Consultation")) {

                        CardLayout layout = (CardLayout) jPanel.getLayout();
                        jPanel.add("RequestLabTestJPanel", new RequestLabTestJPanel(jPanel, usrAcnt, entrpz, wrkReq));
                        layout.next(jPanel);

                    } else {
                        JOptionPane.showMessageDialog(null, "Can not create the Lab request as the current status is " + wrkReq.getReqStatus());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Not Authorised");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please assign the request first");
            }
        }


    }//GEN-LAST:event_btnReqLabTstActionPerformed

    private void btnAssgnToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssgnToMeActionPerformed

        int selectedRow = tblDrWrkArea.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {


            WorkReq pntTrtmWrkReq = (PatientTreatmentReq) tblDrWrkArea.getValueAt(selectedRow, 3);
            if (((PatientTreatmentReq) pntTrtmWrkReq).getDrAssignd() == null) {


                if (pntTrtmWrkReq.getReqStatus().equalsIgnoreCase("Waiting for Doctor")) {
                    //patientTreatmentWorkRequest.setReceiver(userAccount);

                    ((PatientTreatmentReq) pntTrtmWrkReq).setDrAssignd(usrAcnt);
                    pntTrtmWrkReq.setReqStatus("Under Consultation");
                    pplReqTbl();

                    JOptionPane.showMessageDialog(null, "Success !! Request is assigned to you ");
                } else {
                    JOptionPane.showMessageDialog(null, "Cannot assign this patient as its current state is: " + pntTrtmWrkReq.getReqStatus());
                }

            } else {

                if(usrAcnt.equals(((PatientTreatmentReq) pntTrtmWrkReq).getDrAssignd())) {

                 JOptionPane.showMessageDialog(null, "Request is already assigned to you");
                } else {
                    JOptionPane.showMessageDialog(null, "Not Authorized");
                }
            }
        }
    }//GEN-LAST:event_btnAssgnToMeActionPerformed

    private void btnViewPtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPtnActionPerformed
        int selectedRow = tblDrWrkArea.getSelectedRow();
        PatientTreatmentReq patientWorkRequest;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {
            patientWorkRequest = (PatientTreatmentReq) tblDrWrkArea.getValueAt(selectedRow, 3);
            CardLayout layout = (CardLayout) jPanel.getLayout();
            jPanel.add("ViewPatientJPanel", new ViewPatientJPanel(jPanel, usrAcnt, entrpz, patientWorkRequest));
            layout.next(jPanel);
        }
    }//GEN-LAST:event_btnViewPtnActionPerformed

    private void btnProvidePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProvidePrescriptionActionPerformed
        int selectedRow = tblDrWrkArea.getSelectedRow();
        PatientTreatmentReq wrkReq;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {
            wrkReq = (PatientTreatmentReq) tblDrWrkArea.getValueAt(selectedRow, 3);
            if(wrkReq.getDrAssignd() != null)
            {
            if (usrAcnt.equals(wrkReq.getDrAssignd())) {
                if (wrkReq.getReqStatus().equalsIgnoreCase("Lab Test Completed") || wrkReq.getReqStatus().equalsIgnoreCase("Under Consultation")||wrkReq.getReqStatus().equalsIgnoreCase("Blood Bank Request Completed")) {


                    CardLayout layout = (CardLayout) jPanel.getLayout();
                    jPanel.add("ProvidePrescriptionJPanel", new ProvidePrescriptionJPanel(jPanel, usrAcnt, entrpz, wrkReq));
                    layout.next(jPanel);
                } else {
                    JOptionPane.showMessageDialog(null, "Cannot prescribe the Patient as the status is: " + wrkReq.getReqStatus());
                }
            } else {

                JOptionPane.showMessageDialog(null, "Not Authorised");
            }
        }
            else {
                JOptionPane.showMessageDialog(null, "Please assign the request first");
            }
        }
    }//GEN-LAST:event_btnProvidePrescriptionActionPerformed

    private void btnCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompActionPerformed
        int selectedRow = tblDrWrkArea.getSelectedRow();
        PatientTreatmentReq wrkReq;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {

            wrkReq = (PatientTreatmentReq) tblDrWrkArea.getValueAt(selectedRow, 3);
            if(wrkReq.getDrAssignd() != null)
            {
            if (usrAcnt.equals(wrkReq.getDrAssignd())) {
                if (wrkReq.getReqStatus().equalsIgnoreCase("Prescription Provided")) {

                    CardLayout layout = (CardLayout) jPanel.getLayout();
                    jPanel.add("RequestBillingJPanel", new RequestBillingJPanel(jPanel, usrAcnt, entrpz, wrkReq));
                    wrkReq.getPatient().setIsTrtmntdone(true);
                    layout.next(jPanel);

                } else {
                    if(wrkReq.getReqStatus().equalsIgnoreCase("Consultation Completed"))
                    {
                        JOptionPane.showMessageDialog(null, "Treatment is already complete!");
                    }
                    else
                    {
                    JOptionPane.showMessageDialog(null, "Cannot complete the treatment. Please provide Prescription first!");
                }
                }
            } else {

                JOptionPane.showMessageDialog(null, "Not Authorised");
            }
        }
            else {
                JOptionPane.showMessageDialog(null, "Please assign the request first");
            }
        }
    }//GEN-LAST:event_btnCompActionPerformed

    private void btnBldBnkReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBldBnkReqActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblDrWrkArea.getSelectedRow();
        PatientTreatmentReq wrkReq;
        

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {
            wrkReq = (PatientTreatmentReq) tblDrWrkArea.getValueAt(selectedRow, 3);
           //request =(BloodBankWorkRequest) workRequestJTable.getValueAt(selectedRow, 3);

            if (wrkReq.getDrAssignd() != null) {
                if (usrAcnt.equals(wrkReq.getDrAssignd())) {
                    if (wrkReq.getReqStatus().equalsIgnoreCase("Under Consultation")) {


                        CardLayout layout = (CardLayout) jPanel.getLayout();
                        jPanel.add("RequestLabTestJPanel", new BloodBankRequestJPanel(jPanel, usrAcnt, entrpz, wrkReq));
                        layout.next(jPanel);
                    } else {
                        JOptionPane.showMessageDialog(null, "Can not create the Lab request as the current status is " + wrkReq.getReqStatus());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Not Authorised");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please assign the request first");
            }
        }



    }//GEN-LAST:event_btnBldBnkReqActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssgnToMe;
    private javax.swing.JButton btnBldBnkReq;
    private javax.swing.JButton btnComp;
    private javax.swing.JButton btnProvidePrescription;
    private javax.swing.JButton btnReqLabTst;
    private javax.swing.JButton btnViewPtn;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDrWrkArea;
    private javax.swing.JLabel lblEnt;
    private javax.swing.JLabel lblMedicalTstWrkQ;
    private javax.swing.JLabel lblValue;
    private javax.swing.JTable tblDrWrkArea;
    // End of variables declaration//GEN-END:variables
}
