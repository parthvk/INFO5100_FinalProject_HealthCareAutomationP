/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HealthcareAccountantRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Org.OrgAccountant;
import Business.SystemUserAccount.SystemUsers;
import Business.WorkQueue.AccountBillRqst;
import Business.WorkQueue.InsReq;
import Business.WorkQueue.WorkReq;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Parth
 */
public class ProcessMedicalBillingsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private SystemUsers userAccount;
    private Enterprise enterprise;
    private OrgAccountant accountantOrganization;
    private EcoSystem ecoSystem;

    /**
     * Creates new form ProcessMedicalBillingsJPanel
     */
    public ProcessMedicalBillingsJPanel(JPanel userProcessContainer, SystemUsers userAccount, Enterprise enterprise, OrgAccountant accountantOrganization, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.accountantOrganization = accountantOrganization;
        this.ecoSystem = ecoSystem;
        populateTable();
        populateInsuranceClaimTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPrcsReq = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPtntBll = new javax.swing.JTable();
        btnAssgndtToMe = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblInsClmStatus = new javax.swing.JTable();
        lblInsClmStatus = new javax.swing.JLabel();
        lblPtntBillTbl = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 204, 204));

        btnPrcsReq.setBackground(new java.awt.Color(0, 102, 102));
        btnPrcsReq.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnPrcsReq.setForeground(new java.awt.Color(255, 255, 255));
        btnPrcsReq.setText("Process Request");
        btnPrcsReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrcsReqActionPerformed(evt);
            }
        });

        tblPtntBll.setBackground(new java.awt.Color(204, 204, 204));
        tblPtntBll.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PatientId", "Patient Name", "Assigned Doctor", "Accountant ", "Status", "Billing Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPtntBll);

        btnAssgndtToMe.setBackground(new java.awt.Color(0, 102, 102));
        btnAssgndtToMe.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAssgndtToMe.setForeground(new java.awt.Color(255, 255, 255));
        btnAssgndtToMe.setText("AssignToMe");
        btnAssgndtToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssgndtToMeActionPerformed(evt);
            }
        });

        backJButton.setBackground(new java.awt.Color(0, 102, 102));
        backJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backJButton.setForeground(new java.awt.Color(255, 255, 255));
        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Receptionist: Patient Billing Area");

        tblInsClmStatus.setBackground(new java.awt.Color(204, 204, 204));
        tblInsClmStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Policy Number", "Accountant", "Insurance Agent", "Billing Amount", "Claim Amount", "Claim Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblInsClmStatus);

        lblInsClmStatus.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblInsClmStatus.setText("Insurance Claim Status Table");

        lblPtntBillTbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblPtntBillTbl.setText("Patient Billing Table");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(backJButton)
                                .addGap(157, 157, 157)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(372, 372, 372)
                                .addComponent(lblPtntBillTbl))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(274, 274, 274)
                                .addComponent(btnAssgndtToMe)
                                .addGap(69, 69, 69)
                                .addComponent(btnPrcsReq)))
                        .addGap(0, 351, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(331, 331, 331)
                .addComponent(lblInsClmStatus)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton)))
                .addGap(16, 16, 16)
                .addComponent(lblPtntBillTbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAssgndtToMe, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(btnPrcsReq, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addComponent(lblInsClmStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrcsReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrcsReqActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPtntBll.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row !");
            return;
        } else {

            AccountBillRqst accountBillingRequest = (AccountBillRqst) tblPtntBll.getValueAt(selectedRow, 5);

            if (accountBillingRequest.getRcvr() != null) {
                if (accountBillingRequest.getRcvr().equals(userAccount)) {
                    if (accountBillingRequest.getReqStatus().equalsIgnoreCase("Pending on " + accountBillingRequest.getRcvr().getEmploye().getEmpName())) {
                        AccountantProcessRequestJPanel panel = new AccountantProcessRequestJPanel(userProcessContainer, userAccount, accountBillingRequest, enterprise, ecoSystem);
                        userProcessContainer.add("AccountantProcessRequestJPanel", panel);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    } else {
                        JOptionPane.showMessageDialog(null, "Cannot process Request as request is in " + accountBillingRequest.getReqStatus());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Not authorised!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please assign the request first!");
            }
        }
//        }
    }//GEN-LAST:event_btnPrcsReqActionPerformed

    private void btnAssgndtToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssgndtToMeActionPerformed
        int selectedRow = tblPtntBll.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row !");
            return;
        } else {
            WorkReq request = (AccountBillRqst) tblPtntBll.getValueAt(selectedRow, 5);
            if (request.getRcvr() == null) {

                request.setRcvr(userAccount);
                request.setReqStatus("Pending on " + request.getRcvr().getEmploye().getEmpName());
                populateTable();
            } else {
                JOptionPane.showMessageDialog(null, "The request is already assigned ");
            }
        }
    }//GEN-LAST:event_btnAssgndtToMeActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnAssgndtToMe;
    private javax.swing.JButton btnPrcsReq;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblInsClmStatus;
    private javax.swing.JLabel lblPtntBillTbl;
    private javax.swing.JTable tblInsClmStatus;
    private javax.swing.JTable tblPtntBll;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblPtntBll.getModel();

        model.setRowCount(0);

        for (WorkReq request : accountantOrganization.getWrkQ().getWrkReqs()) {
            Object[] row = new Object[6];
            String status = request.getReqStatus();
            row[0] = ((AccountBillRqst) request).getPatient();
            row[1] = ((AccountBillRqst) request).getPatient().getPatFrstNm() + " " + ((AccountBillRqst) request).getPatient().getPatLstNm();
            row[2] = request.getSndr().getEmploye().getEmpName();
            if (status.equalsIgnoreCase("Sent to Treasurer") || status.equalsIgnoreCase("Sent to Secretary")) {
                row[2] = null;
            } else {
                row[3] = request.getRcvr() == null ? null : request.getRcvr().getEmploye().getEmpName();
            }
            //row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[4] = request.getReqStatus();
            row[5] = ((AccountBillRqst) request);

            model.addRow(row);
        }
        
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tblPtntBll.setRowSorter(sorter);

    }

    public void populateInsuranceClaimTable() {
        List<InsReq> insuranceWorkRequests = new ArrayList<>();
        ArrayList<WorkReq> workRequests = userAccount.getWorkQ().getWrkReqs();
        for (WorkReq workRequest : workRequests) {
            if (workRequest instanceof InsReq) {
                insuranceWorkRequests.add((InsReq) workRequest);
            }
        }

        DefaultTableModel model = (DefaultTableModel) tblInsClmStatus.getModel();

        model.setRowCount(0);
        for (InsReq insuranceWorkRequest : insuranceWorkRequests) {
            Object[] row = new Object[6];
            row[0] = insuranceWorkRequest;
            row[1] = userAccount.getEmploye().getEmpName();
            row[2] = insuranceWorkRequest.getRcvr() == null ? "" : insuranceWorkRequest.getRcvr().getEmploye().getEmpName();
            row[3] = insuranceWorkRequest.getBillingAmt();
            row[4] = insuranceWorkRequest.getClmAmt();
            row[5] = insuranceWorkRequest.getReqStatus();
            model.addRow(row);

        }
         TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tblInsClmStatus.setRowSorter(sorter);
    }
}
